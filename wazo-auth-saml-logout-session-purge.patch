diff --git a/wazo_auth/config.py b/wazo_auth/config.py
index 1f08280e..0d6648f8 100644
--- a/wazo_auth/config.py
+++ b/wazo_auth/config.py
@@ -127,7 +127,7 @@ _DEFAULT_CONFIG = {
         'domains': {},
         'acs_url_template': 'https://{{STACK_URL}}/api/auth/0.1/saml/acs',
         'saml_login_timeout_seconds': 600,
-        'saml_session_lifetime_seconds': 86400,
+        'saml_session_lifetime_seconds': 604800,
         'xmlsec_binary': '/usr/bin/xmlsec1',
         'key_file': '/var/lib/wazo-auth/saml/server.key',
         'cert_file': '/var/lib/wazo-auth/saml/server.crt',
diff --git a/wazo_auth/database/queries/__init__.py b/wazo_auth/database/queries/__init__.py
index a8da4416..2ae84298 100644
--- a/wazo_auth/database/queries/__init__.py
+++ b/wazo_auth/database/queries/__init__.py
@@ -10,6 +10,7 @@ from .ldap_config import LDAPConfigDAO
 from .policy import PolicyDAO
 from .refresh_token import RefreshTokenDAO
 from .saml_config import SAMLConfigDAO
+from .saml_pysaml2_cache import SAMLPysaml2CacheDAO
 from .saml_session import SAMLSessionDAO
 from .session import SessionDAO
 from .tenant import TenantDAO
@@ -30,6 +31,7 @@ class DAO:
         refresh_token,
         saml_config,
         saml_session,
+        saml_pysaml2_cache,
         session,
         tenant,
         token,
@@ -45,6 +47,7 @@ class DAO:
         self.refresh_token = refresh_token
         self.saml_config = saml_config
         self.saml_session = saml_session
+        self.saml_pysaml2_cache = saml_pysaml2_cache
         self.session = session
         self.tenant = tenant
         self.token = token
@@ -63,6 +66,7 @@ class DAO:
             refresh_token=RefreshTokenDAO(),
             saml_config=SAMLConfigDAO(),
             saml_session=SAMLSessionDAO(),
+            saml_pysaml2_cache=SAMLPysaml2CacheDAO(),
             session=SessionDAO(),
             tenant=TenantDAO(),
             token=TokenDAO(),
diff --git a/wazo_auth/database/queries/saml_pysaml2_cache.py b/wazo_auth/database/queries/saml_pysaml2_cache.py
index c4831f0b..8efedad1 100644
--- a/wazo_auth/database/queries/saml_pysaml2_cache.py
+++ b/wazo_auth/database/queries/saml_pysaml2_cache.py
@@ -24,18 +24,26 @@ logger: logging.Logger = logging.getLogger(__name__)
 class SAMLPysaml2CacheDAO(filters.FilterMixin, BaseDAO):
     search_filter: filters.SearchFilter = filters.saml_pysaml2_cache_search_filter
 
+    def get_expired(self, expiration_ts: int) -> list[SAMLPysaml2Cache]:
+        return (
+            self.session.query(SAMLPysaml2Cache)
+            .filter(SAMLPysaml2Cache.not_on_or_after < expiration_ts)
+            .all()
+        )
+
     def _search(self, **kwargs):
         search_filter = self.new_search_filter(**kwargs)
         return self.session.query(SAMLPysaml2Cache).filter(search_filter).all()
 
-    def delete(self, name_id: NameID) -> None:
-        filter_ = SAMLPysaml2Cache.name_id == code(name_id)
-        self.session.query(SAMLPysaml2Cache).filter(filter_).delete(
-            synchronize_session=False
-        )
-        self.session.flush()
+    def delete_encoded(self, name_id: str) -> None:
+        filter_ = SAMLPysaml2Cache.name_id == name_id
+        self.session.query(SAMLPysaml2Cache).filter(filter_).delete()
+        self.session.commit()
         logger.debug("Deleted from pysaml cache %s", name_id)
 
+    def delete(self, name_id: NameID) -> None:
+        self.delete_encoded(code(name_id))
+
     def get_identity(
         self,
         name_id: NameID,
@@ -109,7 +117,7 @@ class SAMLPysaml2CacheDAO(filters.FilterMixin, BaseDAO):
 
         cni = code(name_id)
 
-        if self.get(name_id, entity_id):
+        if self.get(name_id, entity_id, False):
             search_filter = self.new_search_filter(name_id=cni, entity_id=entity_id)
             data = {
                 'name_id': cni,
diff --git a/wazo_auth/database/queries/saml_session.py b/wazo_auth/database/queries/saml_session.py
index f45532ed..1a10e71f 100644
--- a/wazo_auth/database/queries/saml_session.py
+++ b/wazo_auth/database/queries/saml_session.py
@@ -111,7 +111,5 @@ class SAMLSessionDAO(filters.FilterMixin, BaseDAO):
 
     def delete(self, request_id) -> None:
         filter_ = SAMLSession.request_id == request_id
-        self.session.query(SAMLSession).filter(filter_).delete(
-            synchronize_session=False
-        )
-        self.session.flush()
+        self.session.query(SAMLSession).filter(filter_).delete()
+        self.session.commit()
diff --git a/wazo_auth/plugins/http/tokens/http.py b/wazo_auth/plugins/http/tokens/http.py
index f634d02d..c7503340 100644
--- a/wazo_auth/plugins/http/tokens/http.py
+++ b/wazo_auth/plugins/http/tokens/http.py
@@ -225,7 +225,6 @@ class Tokens(BaseResource):
             self._saml_service.update_refresh_token(
                 token.refresh_token, args.get('saml_session_id')
             )
-            self._saml_service.invalidate_saml_session_id(args.get('saml_session_id'))
 
         return {'data': token.to_dict()}, 200
 
diff --git a/wazo_auth/services/authentication.py b/wazo_auth/services/authentication.py
index 93202485..9d8a1704 100644
--- a/wazo_auth/services/authentication.py
+++ b/wazo_auth/services/authentication.py
@@ -80,6 +80,8 @@ class AuthenticationService:
         if not saml_login:
             raise NoMatchingSAMLSession(saml_session_id)
 
+        self._saml_service.invalidate_saml_session_id(saml_session_id)
+
         if (
             authorized_authentication_method := self._authorized_authentication_method(
                 saml_login
diff --git a/wazo_auth/services/saml.py b/wazo_auth/services/saml.py
index 4861427b..ad16a864 100644
--- a/wazo_auth/services/saml.py
+++ b/wazo_auth/services/saml.py
@@ -366,10 +366,7 @@ class SAMLService(BaseService):
     def invalidate_saml_session_id(self, saml_session_id: str) -> str | None:
         logger.debug('sessions %s', self._dao.saml_session.list())
         for reqid, session in self._dao.saml_session.list(session_id=saml_session_id):
-            update: dict[str, None] = {
-                'session_id': 'token-already-used',
-                'login': None,
-            }
+            update: dict[str, None] = {'session_id': 'token-already-used'}
             self._dao.saml_session.update(reqid, **update)
             return
         raise exceptions.SAMLProcessingError(
@@ -381,23 +378,34 @@ class SAMLService(BaseService):
             update = {'refresh_token_uuid': refresh_token}
             self._dao.saml_session.update(session_data.request_id, **update)
 
-    def clean_pending_requests(self, maybe_now: datetime | None = None) -> None:
-        now: datetime = maybe_now or datetime.now(timezone.utc)
+    def _clean_saml_sessions(self, now: datetime) -> None:
         for item in self._dao.saml_session.list():
-            expire_at: datetime = (
-                item.auth_context.start_time + self._saml_session_lifetime
-            )
-            if now > expire_at:
-                logger.debug("Removing SAML context: %s", item)
+            context: SamlAuthContext = item.auth_context
+            expire_at: datetime = context.start_time + self._saml_session_lifetime
+            if (
+                now > expire_at
+                and context.saml_session_id == 'token_already_used'
+                and context.refresh_token_uuid is None
+            ):
+                logger.debug('Deleting used SAML session: %s', item)
                 self._dao.saml_session.delete(item.request_id)
-                return
-            if item.auth_context.saml_session_id != 'token_already_used':
-                invalidate_at: datetime = (
-                    item.auth_context.start_time + self._saml_login_timeout
-                )
-                if now > invalidate_at:
-                    logger.debug('Deleting SAML login session on timeout: %s', item)
-                    self._dao.saml_session.delete(item.request_id)
+            elif now > expire_at and context.saml_session_id != 'token_already_used':
+                logger.debug("Deleting SAML session on timeout: %s", item)
+                self._dao.saml_session.delete(item.request_id)
+
+    def _clean_pysaml2_sessions(self, now: datetime) -> None:
+        session_expired: datetime = (
+            datetime.now(tz=timezone.utc) - self._saml_session_lifetime
+        )
+        session_expired_timestamp: int = int(round(session_expired.timestamp()))
+        for item in self._dao.saml_pysaml2_cache.get_expired(session_expired_timestamp):
+            logger.debug("Deleting from pysaml2 cache: %s", item.name_id)
+            self._dao.saml_pysaml2_cache.delete_encoded(item.name_id)
+
+    def clean_pending_requests(self, maybe_now: datetime | None = None) -> None:
+        now: datetime = maybe_now or datetime.now(timezone.utc)
+        self._clean_saml_sessions(now)
+        self._clean_pysaml2_sessions(now)
 
     def process_logout_request(self, token):
         logger.debug(
